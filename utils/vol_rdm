#!/usr/bin/env python

import os, sys

if len(sys.argv) < 4:
    msg = """Usage: vol_rdm output mask image1 [image2 image3...]"
    Calculates an RDM for the image(s) based on correlation
    over time within mask and writes a graphics file to output
    (file type is based on the file extension of output)"""
    sys.exit(msg)

import numpy as np
from scipy.spatial.distance import pdist, squareform
import matplotlib.pyplot as plt
from mvpa2.datasets.mri import fmri_dataset
from mvpa2.base.dataset import vstack
from mvpa2.mappers.detrend import poly_detrend

output = sys.argv[1]
mask = sys.argv[2]
if not mask.endswith('.nii.gz'):
    mask += '.nii.gz'
images = sys.argv[3:]
for i in range(len(images)):
    if not images[i].endswith('.nii.gz'):
        images[i] += '.nii.gz'
    if not os.path.exists(images[i]):
        raise IOError('Input image does not exist: %s' % images[i])
if not os.path.exists(mask):
    raise IOError('Mask does not exist: %s' % mask)

dsets = []
for image in images:
    print "Loading %s with %s mask..." % (image, mask)
    ds = fmri_dataset(image, mask=mask)
    poly_detrend(ds)
    dsets.append(ds)
ds = vstack(dsets)

print "Calculating RDM..."
distvec = pdist(ds.samples, 'correlation')
mat = squareform(distvec)

clo = np.percentile(1-distvec, 1)
chi = np.percentile(1-distvec, 99)

plt.pcolor(1 - mat, clim=(clo, chi))
plt.axis('image')

plt.savefig(output, bbox_inches='tight')
